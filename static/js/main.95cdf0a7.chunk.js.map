{"version":3,"sources":["Mycomp/FormatTime.js","App.js","Mycomp/Stopwatch.js","reportWebVitals.js","index.js"],"names":["FormatTime","timer","centiseconds","Math","floor","slice","getSeconds","getMinutes","Timer","initialstate","useState","setTimer","isActive","setIsActive","isPaused","setIsPaused","ref","useRef","start","current","setInterval","pause","clearInterval","resume","reset","Stopwatch","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAAaA,G,KAAa,SAACC,GACzB,IAAMC,GAAgB,IAAOC,KAAKC,MAAMH,EAAQ,IAAM,KAAMI,OAAO,GAC7DC,GAAc,IAAOH,KAAKC,MAAMH,EAAQ,KAAQ,IAAKI,OAAO,GAC5DE,GAAc,IAAOJ,KAAKC,MAAMH,EAAQ,KAAS,IAAKI,OAAO,GAEnE,OADkB,IAAMF,KAAKC,MAAMH,EAAQ,OAAUI,OAAO,GAC1C,IAAME,EAAa,IAAMD,EAAa,IAAMJ,I,sBCuBjDM,EAvBD,WACZ,MCJuB,WAAuB,IAAtBC,EAAqB,uDAAN,EACvC,EAA0BC,mBAASD,GAAnC,mBAAOR,EAAP,KAAcU,EAAd,KACA,EAAgCD,oBAAS,GAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAgCH,oBAAS,GAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACMC,EAAMC,iBAAO,MAwBnB,MAAO,CAAEhB,QAAOa,WAAUF,WAAUM,MAvBtB,WACZL,GAAY,GACZE,GAAY,GACZC,EAAIG,QAAUC,aAAY,WACxBT,GAAS,SAACV,GAAD,OAAWA,EAAQ,OAC3B,IAkBsCoB,MAhB7B,WACZC,cAAcN,EAAIG,SAClBJ,GAAY,IAcoCQ,OAZnC,WACbR,GAAY,GACZC,EAAIG,QAAUC,aAAY,WACxBT,GAAS,SAACV,GAAD,OAAWA,EAAQ,OAC3B,IAQqDuB,MAN5C,WACZF,cAAcN,EAAIG,SAClBJ,GAAY,GACZF,GAAY,GACZF,EAAS,KDrBTc,CAAU,GADJxB,EAAR,EAAQA,MAAOa,EAAf,EAAeA,SAAUF,EAAzB,EAAyBA,SAAUM,EAAnC,EAAmCA,MAAOG,EAA1C,EAA0CA,MAAOE,EAAjD,EAAiDA,OAAQC,EAAzD,EAAyDA,MAEzD,OACE,sBAAKE,UAAU,MAAf,UACE,oBAAIA,UAAU,GAAd,uBACA,sBAAKA,UAAU,aAAf,UACE,4BAAI1B,EAAWC,KACf,sBAAKyB,UAAU,UAAf,UACId,GAAaE,EAEXA,EACF,wBAAQa,QAASN,EAAjB,mBAEA,wBAAQM,QAASJ,EAAjB,oBAJA,wBAAQI,QAAST,EAAjB,mBAMF,wBAAQS,QAASH,EAAjB,6BETKI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.95cdf0a7.chunk.js","sourcesContent":["export const FormatTime = (timer) => {\r\n  const centiseconds = (\"0\" + (Math.floor(timer / 10) % 100)).slice(-2);\r\n  const getSeconds = (\"0\" + (Math.floor(timer / 1000) % 60)).slice(-2);\r\n  const getMinutes = (\"0\" + (Math.floor(timer / 60000) % 60)).slice(-2);\r\n  const getHours = (\"0\" + Math.floor(timer / 3600000)).slice(-2);\r\n  return getHours + \":\" + getMinutes + \":\" + getSeconds + \":\" + centiseconds;\r\n};\r\n","import React from \"react\";\nimport { FormatTime } from \"./Mycomp/FormatTime\";\nimport { Stopwatch } from \"./Mycomp/Stopwatch\";\nimport \"./App.css\";\n\nconst Timer = () => {\n  const { timer, isPaused, isActive, start, pause, resume, reset } =\n    Stopwatch(0);\n  return (\n    <div className=\"app\">\n      <h1 className=\"\">STOPWATCH</h1>\n      <div className=\"timer-card\">\n        <p>{FormatTime(timer)}</p>\n        <div className=\"buttons\">\n          {!isActive && !isPaused ? (\n            <button onClick={start}>Start</button>\n          ) : isPaused ? (\n            <button onClick={pause}>Pause</button>\n          ) : (\n            <button onClick={resume}>Resume</button>\n          )}\n          <button onClick={reset}>Reset</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Timer;\n","import { useState, useRef } from \"react\";\r\n\r\nexport const Stopwatch = (initialstate = 0) => {\r\n  const [timer, setTimer] = useState(initialstate);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const ref = useRef(null);\r\n  const start = () => {\r\n    setIsActive(true);\r\n    setIsPaused(true);\r\n    ref.current = setInterval(() => {\r\n      setTimer((timer) => timer + 1);\r\n    }, 1);\r\n  };\r\n  const pause = () => {\r\n    clearInterval(ref.current);\r\n    setIsPaused(false);\r\n  };\r\n  const resume = () => {\r\n    setIsPaused(true);\r\n    ref.current = setInterval(() => {\r\n      setTimer((timer) => timer + 1);\r\n    }, 1);\r\n  };\r\n  const reset = () => {\r\n    clearInterval(ref.current);\r\n    setIsPaused(false);\r\n    setIsActive(false);\r\n    setTimer(0);\r\n  };\r\n  return { timer, isPaused, isActive, start, pause, resume, reset };\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}